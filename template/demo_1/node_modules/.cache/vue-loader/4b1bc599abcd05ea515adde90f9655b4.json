{"remainingRequest":"/Users/jyothish/Documents/stellar-vue-free/template/demo_1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jyothish/Documents/stellar-vue-free/template/demo_1/src/pages/widgets/index.vue?vue&type=template&id=f2b16ec4&scoped=true&","dependencies":[{"path":"/Users/jyothish/Documents/stellar-vue-free/template/demo_1/src/pages/widgets/index.vue","mtime":1603775091229},{"path":"/Users/jyothish/Documents/stellar-vue-free/template/demo_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jyothish/Documents/stellar-vue-free/template/demo_1/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jyothish/Documents/stellar-vue-free/template/demo_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jyothish/Documents/stellar-vue-free/template/demo_1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}